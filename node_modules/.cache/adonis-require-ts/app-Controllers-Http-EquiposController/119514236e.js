"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Equipo_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Equipo"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class EquiposController {
    async store({ auth, request, response }) {
        const Equipos = new Equipo_1.default();
        const Nombre = request.input('Nombre');
        const Presidente = request.input('Presidente');
        const DT = request.input('DT');
        const Estadio = request.input('Estadio');
        try {
            await auth.use('api').authenticate();
            Equipos.Nombre_Equipo = Nombre;
            Equipos.Presidente_Equipo = Presidente;
            Equipos.DT_Equipo = DT;
            Equipos.Estadio = Estadio;
            await Equipos.save();
            return response.status(200);
        }
        catch {
            return response.badRequest('No tienes permisos');
        }
    }
    async show({ auth, response }) {
        try {
            await auth.use('api').authenticate();
            console.log(auth.use('api').user);
            const Equipos = Database_1.default.query()
                .from('equipos')
                .select('equipos.id')
                .select('equipos.Nombre_Equipo as Nombre');
            return Equipos;
        }
        catch {
            response.badRequest('No tienes permiso');
        }
    }
    async update({ auth, request, response }) {
        const id = request.input('id');
        const Nombre = request.input('Nombre');
        const Presidente = request.input('Presidente');
        const DT = request.input('DT');
        const Estadio = request.input('Estadio');
        try {
            await auth.use('api').authenticate();
            console.log(auth.use('api').user);
            const Equipos = await Equipo_1.default.findOrFail(id);
            Equipos.Nombre_Equipo = Nombre;
            Equipos.Presidente_Equipo = Presidente;
            Equipos.DT_Equipo = DT;
            Equipos.Estadio = Estadio;
            await Equipos.save();
            return response.status(200);
        }
        catch {
            return response.badRequest('ERROR');
        }
    }
    async delete({ auth, request, response, params }) {
        try {
            await auth.use('api').authenticate();
            const Equipos = await Equipo_1.default.findOrFail(params.id);
            await Equipos.delete();
        }
        catch {
            return response.badRequest('ERROR');
        }
    }
    async DatosEquipoMod({ auth, params, response }) {
        try {
            await auth.use('api').authenticate();
            const Equipos = Database_1.default.query()
                .from('equipo_ligas')
                .join('equipos', 'equipo_ligas.Equipo', '=', 'equipos.id')
                .join('ligas', 'equipo_ligas.Liga', '=', 'ligas.id')
                .select('equipos.id')
                .select('equipos.Nombre_Equipo as Equipo')
                .select('equipos.Presidente_Equipo as Presidente')
                .select('ligas.Nombre_Liga as Liga')
                .join('estadios', 'equipos.Estadio', '=', 'estadios.id')
                .select('estadios.Nombre_Estadio as Estadio')
                .join('dt', 'equipos.DT_Equipo', '=', 'dt.id')
                .select('dt.Nombre_DT as Director_Tecnico')
                .where('equipos.id', '=', params.id);
            return Equipos;
        }
        catch {
            return response.badRequest('Algo salio mal');
        }
    }
    async DatosEquipo({ auth, response }) {
        try {
            await auth.use('api').authenticate();
            const Equipos = Database_1.default.query()
                .from('equipo_ligas')
                .join('equipos', 'equipo_ligas.Equipo', '=', 'equipos.id')
                .join('ligas', 'equipo_ligas.Liga', '=', 'ligas.id')
                .select('equipos.id')
                .select('equipos.Nombre_Equipo as Equipo')
                .select('ligas.Nombre_Liga as Liga')
                .join('estadios', 'equipos.Estadio', '=', 'estadios.id')
                .select('estadios.Nombre_Estadio as Estadio')
                .select('estadios.Ubicacion_Estadio as Ciudad')
                .join('dt', 'equipos.DT_Equipo', '=', 'dt.id')
                .select('dt.Nombre_DT as Director_Tecnico');
            return Equipos;
        }
        catch {
            return response.badRequest('Algo salio mal');
        }
    }
}
exports.default = EquiposController;
//# sourceMappingURL=data:application/json;base64,