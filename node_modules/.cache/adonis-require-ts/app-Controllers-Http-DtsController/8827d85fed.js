"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const Dt_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Dt"));
class DtsController {
    async store({ auth, request, response }) {
        const DT = new Dt_1.default();
        const Nombre = request.input('Nombre');
        const Nacionalidad = request.input('Nacionalidad');
        const Edad = request.input('Edad');
        try {
            await auth.use('api').authenticate();
            DT.Nombre_DT = Nombre;
            DT.Nacionalidad_DT = Nacionalidad;
            DT.Edad_DT = Edad;
            await DT.save();
            return response.status(200);
        }
        catch {
            return response.badRequest('No tienes permisos');
        }
    }
    async show({ auth, response }) {
        try {
            await auth.use('api').authenticate();
            console.log(auth.use('api').user);
            const DT = Database_1.default.query()
                .from('dt')
                .select('dt.id')
                .select('dt.Nombre_DT as Nombre')
                .select('dt.Nacionalidad_DT as Nacionalidad')
                .select('dt.Edad_DT as Edad');
            return DT;
        }
        catch {
            response.badRequest('No tienes permiso');
        }
    }
    async update({ auth, request, response }) {
        const id = request.input('id');
        const Nombre = request.input('Nombre');
        const Nacionalidad = request.input('Nacionalidad');
        const Edad = request.input('Edad');
        try {
            await auth.use('api').authenticate();
            console.log(auth.use('api').user);
            const DT = await Dt_1.default.findOrFail(id);
            DT.Nombre_DT = Nombre;
            DT.Nacionalidad_DT = Nacionalidad;
            DT.Edad_DT = Edad;
            await DT.save();
        }
        catch {
            return response.badRequest('ERROR');
        }
    }
    async delete({ auth, request, response }) {
        const id = request.input('id');
        try {
            await auth.use('api').authenticate();
            console.log(auth.use('api').user);
            const DT = await Dt_1.default.findOrFail(id);
            await DT.delete();
        }
        catch {
            return response.badRequest('ERROR');
        }
    }
}
exports.default = DtsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHRzQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkR0c0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwyRkFBa0Q7QUFDbEQsNkVBQStCO0FBQy9CLE1BQXFCLGFBQWE7SUFFdkIsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksRUFBQyxPQUFPLEVBQUMsUUFBUSxFQUFDO1FBRXRDLE1BQU0sRUFBRSxHQUFDLElBQUksWUFBRSxFQUFFLENBQUE7UUFDakIsTUFBTSxNQUFNLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNwQyxNQUFNLFlBQVksR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ2hELE1BQU0sSUFBSSxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDaEMsSUFDQTtZQUNJLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtZQUNwQyxFQUFFLENBQUMsU0FBUyxHQUFDLE1BQU0sQ0FBQTtZQUNuQixFQUFFLENBQUMsZUFBZSxHQUFDLFlBQVksQ0FBQTtZQUMvQixFQUFFLENBQUMsT0FBTyxHQUFDLElBQUksQ0FBQTtZQUNmLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ2YsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzlCO1FBQUEsTUFDRDtZQUNJLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1NBQ25EO0lBQ0wsQ0FBQztJQUNNLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUMsUUFBUSxFQUFDO1FBRTdCLElBQ0E7WUFDSSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUE7WUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUssQ0FBQyxDQUFBO1lBQ2xDLE1BQU0sRUFBRSxHQUFDLGtCQUFRLENBQUMsS0FBSyxFQUFFO2lCQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDO2lCQUNWLE1BQU0sQ0FBQyxPQUFPLENBQUM7aUJBQ2YsTUFBTSxDQUFDLHdCQUF3QixDQUFDO2lCQUNoQyxNQUFNLENBQUMsb0NBQW9DLENBQUM7aUJBQzVDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1lBQzdCLE9BQU8sRUFBRSxDQUFBO1NBQ1o7UUFBQSxNQUNEO1lBQ0ksUUFBUSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1NBQzNDO0lBQ0wsQ0FBQztJQUNNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQztRQUV2QyxNQUFNLEVBQUUsR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzVCLE1BQU0sTUFBTSxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDcEMsTUFBTSxZQUFZLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUNoRCxNQUFNLElBQUksR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2hDLElBQ0E7WUFDSSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUE7WUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUssQ0FBQyxDQUFBO1lBQ2xDLE1BQU0sRUFBRSxHQUFDLE1BQU0sWUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNoQyxFQUFFLENBQUMsU0FBUyxHQUFDLE1BQU0sQ0FBQTtZQUNuQixFQUFFLENBQUMsZUFBZSxHQUFDLFlBQVksQ0FBQTtZQUMvQixFQUFFLENBQUMsT0FBTyxHQUFDLElBQUksQ0FBQTtZQUNmLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO1NBQ2xCO1FBQUEsTUFDRDtZQUNJLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUN0QztJQUNMLENBQUM7SUFDTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUM7UUFFdkMsTUFBTSxFQUFFLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM1QixJQUNBO1lBQ0ksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1lBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFLLENBQUMsQ0FBQTtZQUNsQyxNQUFNLEVBQUUsR0FBQyxNQUFNLFlBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDaEMsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUE7U0FDcEI7UUFBQSxNQUNEO1lBQ0ksT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1NBQ3RDO0lBQ0wsQ0FBQztDQUNKO0FBekVELGdDQXlFQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSBcIkBpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlXCI7XG5pbXBvcnQgRHQgZnJvbSBcIkFwcC9Nb2RlbHMvRHRcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIER0c0NvbnRyb2xsZXIgXG57XG4gICAgcHVibGljIGFzeW5jIHN0b3JlKHthdXRoLHJlcXVlc3QscmVzcG9uc2V9KVxuICAgIHtcbiAgICAgICAgY29uc3QgRFQ9bmV3IER0KClcbiAgICAgICAgY29uc3QgTm9tYnJlPXJlcXVlc3QuaW5wdXQoJ05vbWJyZScpXG4gICAgICAgIGNvbnN0IE5hY2lvbmFsaWRhZD1yZXF1ZXN0LmlucHV0KCdOYWNpb25hbGlkYWQnKVxuICAgICAgICBjb25zdCBFZGFkPXJlcXVlc3QuaW5wdXQoJ0VkYWQnKVxuICAgICAgICB0cnlcbiAgICAgICAge1xuICAgICAgICAgICAgYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXG4gICAgICAgICAgICBEVC5Ob21icmVfRFQ9Tm9tYnJlXG4gICAgICAgICAgICBEVC5OYWNpb25hbGlkYWRfRFQ9TmFjaW9uYWxpZGFkXG4gICAgICAgICAgICBEVC5FZGFkX0RUPUVkYWRcbiAgICAgICAgICAgIGF3YWl0IERULnNhdmUoKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDApXG4gICAgICAgIH1jYXRjaFxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYmFkUmVxdWVzdCgnTm8gdGllbmVzIHBlcm1pc29zJylcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgc2hvdyh7YXV0aCxyZXNwb25zZX0pXG4gICAge1xuICAgICAgICB0cnlcbiAgICAgICAge1xuICAgICAgICAgICAgYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhdXRoLnVzZSgnYXBpJykudXNlciEpXG4gICAgICAgICAgICBjb25zdCBEVD1EYXRhYmFzZS5xdWVyeSgpXG4gICAgICAgICAgICAuZnJvbSgnZHQnKVxuICAgICAgICAgICAgLnNlbGVjdCgnZHQuaWQnKVxuICAgICAgICAgICAgLnNlbGVjdCgnZHQuTm9tYnJlX0RUIGFzIE5vbWJyZScpXG4gICAgICAgICAgICAuc2VsZWN0KCdkdC5OYWNpb25hbGlkYWRfRFQgYXMgTmFjaW9uYWxpZGFkJylcbiAgICAgICAgICAgIC5zZWxlY3QoJ2R0LkVkYWRfRFQgYXMgRWRhZCcpXG4gICAgICAgICAgICByZXR1cm4gRFRcbiAgICAgICAgfWNhdGNoXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3QoJ05vIHRpZW5lcyBwZXJtaXNvJylcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlKHthdXRoLHJlcXVlc3QscmVzcG9uc2V9KVxuICAgIHtcbiAgICAgICAgY29uc3QgaWQ9cmVxdWVzdC5pbnB1dCgnaWQnKVxuICAgICAgICBjb25zdCBOb21icmU9cmVxdWVzdC5pbnB1dCgnTm9tYnJlJylcbiAgICAgICAgY29uc3QgTmFjaW9uYWxpZGFkPXJlcXVlc3QuaW5wdXQoJ05hY2lvbmFsaWRhZCcpXG4gICAgICAgIGNvbnN0IEVkYWQ9cmVxdWVzdC5pbnB1dCgnRWRhZCcpXG4gICAgICAgIHRyeVxuICAgICAgICB7XG4gICAgICAgICAgICBhd2FpdCBhdXRoLnVzZSgnYXBpJykuYXV0aGVudGljYXRlKClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGF1dGgudXNlKCdhcGknKS51c2VyISlcbiAgICAgICAgICAgIGNvbnN0IERUPWF3YWl0IER0LmZpbmRPckZhaWwoaWQpXG4gICAgICAgICAgICBEVC5Ob21icmVfRFQ9Tm9tYnJlXG4gICAgICAgICAgICBEVC5OYWNpb25hbGlkYWRfRFQ9TmFjaW9uYWxpZGFkXG4gICAgICAgICAgICBEVC5FZGFkX0RUPUVkYWRcbiAgICAgICAgICAgIGF3YWl0IERULnNhdmUoKVxuICAgICAgICB9Y2F0Y2hcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoJ0VSUk9SJylcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgZGVsZXRlKHthdXRoLHJlcXVlc3QscmVzcG9uc2V9KVxuICAgIHtcbiAgICAgICAgY29uc3QgaWQ9cmVxdWVzdC5pbnB1dCgnaWQnKVxuICAgICAgICB0cnlcbiAgICAgICAge1xuICAgICAgICAgICAgYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhdXRoLnVzZSgnYXBpJykudXNlciEpXG4gICAgICAgICAgICBjb25zdCBEVD1hd2FpdCBEdC5maW5kT3JGYWlsKGlkKVxuICAgICAgICAgICAgYXdhaXQgRFQuZGVsZXRlKClcbiAgICAgICAgfWNhdGNoXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5iYWRSZXF1ZXN0KCdFUlJPUicpXG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=